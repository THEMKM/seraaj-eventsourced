name: Code Quality Checks

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  PNPM_VERSION: '8'

jobs:
  # Job 1: Python Code Quality
  python-quality:
    runs-on: ubuntu-latest
    name: Python Code Quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install Python quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit safety
        pip install -r requirements.txt
        
    - name: Check Python code formatting (Black)
      run: |
        echo "Checking Python code formatting with Black..."
        black --check --diff services/ bff/ || {
          echo "❌ Python code formatting issues found"
          echo "Run: black services/ bff/"
          exit 1
        }
        echo "✅ Python code formatting is correct"
        
    - name: Check Python import sorting (isort)
      run: |
        echo "Checking Python import sorting with isort..."
        isort --check-only --diff services/ bff/ || {
          echo "❌ Python import sorting issues found"
          echo "Run: isort services/ bff/"
          exit 1
        }
        echo "✅ Python import sorting is correct"
        
    - name: Python linting (flake8)
      run: |
        echo "Running Python linting with flake8..."
        flake8 services/ bff/ \
          --max-line-length=100 \
          --exclude=__pycache__,migrations,*.egg-info \
          --ignore=E203,W503 \
          --max-complexity=10
        echo "✅ Python linting passed"
        
    - name: Python type checking (mypy)
      run: |
        echo "Running Python type checking with mypy..."
        mypy services/ bff/ \
          --ignore-missing-imports \
          --no-strict-optional \
          --allow-redefinition || {
          echo "⚠️ Type checking issues found (non-blocking)"
        }
        
    - name: Python security scan (bandit)
      run: |
        echo "Running Python security scan with bandit..."
        bandit -r services/ bff/ \
          -f json \
          -o bandit-report.json \
          --skip B101,B601 || {
          echo "⚠️ Security issues found (review bandit-report.json)"
        }
        
        # Show high severity issues
        if [ -f bandit-report.json ]; then
          python -c "
import json
with open('bandit-report.json', 'r') as f:
    report = json.load(f)
    high_issues = [issue for issue in report.get('results', []) if issue.get('issue_severity') == 'HIGH']
    if high_issues:
        print('⚠️ High severity security issues found:')
        for issue in high_issues[:3]:
            print(f'  - {issue.get(\"test_id\", \"Unknown\")}: {issue.get(\"issue_text\", \"\")}')
        if len(high_issues) > 3:
            print(f'  ... and {len(high_issues) - 3} more')
    else:
        print('✅ No high severity security issues found')
"
        fi
        
    - name: Python dependency security scan (safety)
      run: |
        echo "Running Python dependency security scan with safety..."
        safety check --json --output safety-report.json || {
          echo "⚠️ Vulnerable dependencies found (review safety-report.json)"
        }
        
        # Show critical vulnerabilities
        if [ -f safety-report.json ]; then
          python -c "
import json
try:
    with open('safety-report.json', 'r') as f:
        report = json.load(f)
    vulns = report if isinstance(report, list) else []
    if vulns:
        print('⚠️ Vulnerable dependencies found:')
        for vuln in vulns[:3]:
            pkg = vuln.get('package_name', 'Unknown')
            spec = vuln.get('specs', [''])[0] 
            print(f'  - {pkg} {spec}: {vuln.get(\"advisory\", \"\")[:100]}...')
        if len(vulns) > 3:
            print(f'  ... and {len(vulns) - 3} more')
    else:
        print('✅ No vulnerable dependencies found')
except:
    print('✅ Safety check completed')
"
        fi
        
    - name: Upload Python quality reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: python-quality-reports
        path: |
          bandit-report.json
          safety-report.json

  # Job 2: TypeScript/JavaScript Quality
  typescript-quality:
    runs-on: ubuntu-latest
    name: TypeScript/JavaScript Quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install pnpm
      run: npm install -g pnpm@${{ env.PNPM_VERSION }}
      
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: TypeScript compilation check
      run: |
        echo "Checking TypeScript compilation..."
        pnpm type-check || {
          echo "❌ TypeScript compilation errors found"
          exit 1
        }
        echo "✅ TypeScript compilation successful"
        
    - name: ESLint check
      run: |
        echo "Running ESLint..."
        pnpm lint || {
          echo "❌ ESLint issues found"
          echo "Run: pnpm lint --fix"
          exit 1
        }
        echo "✅ ESLint checks passed"
        
    - name: Check for unused dependencies
      run: |
        echo "Checking for unused dependencies..."
        npx depcheck --json > depcheck-report.json || true
        
        # Parse and show results
        node -e "
        const fs = require('fs');
        try {
          const report = JSON.parse(fs.readFileSync('depcheck-report.json', 'utf8'));
          const unused = report.dependencies || [];
          const missing = report.missing || {};
          
          if (unused.length > 0) {
            console.log('⚠️ Unused dependencies found:', unused.slice(0, 5).join(', '));
            if (unused.length > 5) console.log(\`  ... and \${unused.length - 5} more\`);
          } else {
            console.log('✅ No unused dependencies found');
          }
          
          const missingKeys = Object.keys(missing);
          if (missingKeys.length > 0) {
            console.log('⚠️ Missing dependencies found:', missingKeys.slice(0, 3).join(', '));
            if (missingKeys.length > 3) console.log(\`  ... and \${missingKeys.length - 3} more\`);
          } else {
            console.log('✅ No missing dependencies found');
          }
        } catch (e) {
          console.log('✅ Dependency check completed');
        }
        "
        
    - name: Build check
      run: |
        echo "Testing production build..."
        pnpm build || {
          echo "❌ Build failed"
          exit 1
        }
        echo "✅ Build successful"

  # Job 3: Contract & API Quality
  contract-quality:
    runs-on: ubuntu-latest
    name: Contract & API Quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install API tools
      run: |
        npm install -g @redocly/cli@1.16.0
        npm install -g ajv-cli@5.0.0
        
    - name: Validate OpenAPI specifications
      run: |
        echo "Validating OpenAPI specifications..."
        
        # Check if OpenAPI files exist and validate them
        for spec_file in contracts/v*/api/*.openapi.yaml; do
          if [ -f "$spec_file" ]; then
            echo "Validating $spec_file..."
            redocly lint "$spec_file" || {
              echo "❌ OpenAPI validation failed for $spec_file"
              exit 1
            }
          fi
        done
        
        echo "✅ OpenAPI specifications are valid"
        
    - name: Validate JSON schemas
      run: |
        echo "Validating JSON schemas..."
        
        # Validate all JSON schema files
        find contracts/ -name "*.json" -type f | while read -r schema_file; do
          echo "Validating $schema_file..."
          ajv compile -s "$schema_file" --strict=true || {
            echo "❌ JSON schema validation failed for $schema_file"
            exit 1
          }
        done
        
        echo "✅ JSON schemas are valid"
        
    - name: Check contract versioning
      run: |
        echo "Checking contract versioning..."
        
        # Check if version.lock exists and is valid
        if [ -f "contracts/version.lock" ]; then
          echo "✅ Contract version lock found"
          cat contracts/version.lock
        else
          echo "⚠️ No contract version lock found"
        fi
        
    - name: Validate schema generation
      run: |
        echo "Validating schema generation is up to date..."
        
        # Run generators and check if anything changed
        python tools/generators/generate.py
        
        # Check if generated files are up to date
        if git diff --quiet packages/sdk-bff/; then
          echo "✅ Generated SDK is up to date"
        else
          echo "❌ Generated SDK is out of sync with contracts"
          echo "Changed files:"
          git diff --name-only packages/sdk-bff/
          echo ""
          echo "Run: python tools/generators/generate.py"
          exit 1
        fi

  # Job 4: Documentation Quality
  docs-quality:
    runs-on: ubuntu-latest
    name: Documentation Quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check README files
      run: |
        echo "Checking documentation quality..."
        
        # Check if main README exists
        if [ -f "README.md" ]; then
          echo "✅ Main README.md found"
          
          # Check if README has basic sections
          if grep -q "# " README.md && grep -q "## " README.md; then
            echo "✅ README has proper structure"
          else
            echo "⚠️ README lacks proper structure (headings)"
          fi
        else
          echo "⚠️ Main README.md not found"
        fi
        
    - name: Check for TODO/FIXME comments
      run: |
        echo "Checking for TODO/FIXME comments..."
        
        # Find TODO and FIXME comments in source code
        todo_count=$(find services/ bff/ apps/ -type f \( -name "*.py" -o -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" \) -exec grep -l "TODO\|FIXME" {} \; | wc -l)
        
        if [ "$todo_count" -gt 0 ]; then
          echo "⚠️ Found $todo_count files with TODO/FIXME comments"
          find services/ bff/ apps/ -type f \( -name "*.py" -o -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" \) -exec grep -l "TODO\|FIXME" {} \; | head -5
        else
          echo "✅ No TODO/FIXME comments found"
        fi

  # Job 5: Quality Summary
  quality-summary:
    runs-on: ubuntu-latest
    name: Code Quality Summary
    needs: [python-quality, typescript-quality, contract-quality, docs-quality]
    if: always()
    
    steps:
    - name: Generate quality summary
      run: |
        echo "📊 Code Quality Summary"
        echo "======================"
        echo ""
        echo "Python Quality: ${{ needs.python-quality.result }}"
        echo "TypeScript Quality: ${{ needs.typescript-quality.result }}"  
        echo "Contract Quality: ${{ needs.contract-quality.result }}"
        echo "Documentation Quality: ${{ needs.docs-quality.result }}"
        echo ""
        
        # Count failures
        failed=0
        [ "${{ needs.python-quality.result }}" != "success" ] && failed=$((failed + 1))
        [ "${{ needs.typescript-quality.result }}" != "success" ] && failed=$((failed + 1))
        [ "${{ needs.contract-quality.result }}" != "success" ] && failed=$((failed + 1))
        [ "${{ needs.docs-quality.result }}" != "success" ] && failed=$((failed + 1))
        
        if [ $failed -eq 0 ]; then
          echo "✅ All quality checks passed!"
        else
          echo "❌ $failed quality check(s) failed"
          echo ""
          echo "Please review the failed jobs above and fix the issues."
          exit 1
        fi