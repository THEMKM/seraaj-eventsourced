# generated by datamodel-codegen:
#   filename:  user.schema.json
#   timestamp: 2025-08-11T07:37:00+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Optional

from pydantic import BaseModel, ConfigDict, Field, AnyUrl


class UserRole(Enum):
    VOLUNTEER = "VOLUNTEER"
    ORG_ADMIN = "ORG_ADMIN"
    SUPERADMIN = "SUPERADMIN"


class User(BaseModel):
    """
    A user account in the Seraaj platform with authentication capabilities
    """
    model_config = ConfigDict(
        extra='forbid',
        use_enum_values=True,
    )
    
    id: str = Field(
        ..., 
        description='Unique user identifier (UUID format)',
        pattern=r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
    )
    email: str = Field(..., description="User's email address (used for authentication)")
    name: str = Field(
        ..., 
        description="User's full name", 
        min_length=1, 
        max_length=200
    )
    role: UserRole = Field(..., description="User's role determining access permissions")
    isVerified: bool = Field(..., description="Whether the user's email has been verified")
    createdAt: datetime = Field(..., description="When the user account was created")
    updatedAt: Optional[datetime] = Field(
        None, 
        description="When the user account was last updated"
    )
    lastLoginAt: Optional[datetime] = Field(None, description="When the user last logged in")
    profileImageUrl: Optional[AnyUrl] = Field(None, description="URL to user's profile image")


class AuthTokens(BaseModel):
    """
    Authentication tokens returned from auth endpoints
    """
    model_config = ConfigDict(extra='forbid')
    
    accessToken: str = Field(..., description="JWT access token for API authentication")
    refreshToken: str = Field(..., description="Refresh token for obtaining new access tokens")
    expiresIn: int = Field(..., description="Access token expiration time in seconds", ge=1)
    tokenType: str = Field(..., description="Token type (always Bearer)")


class RegisterUserRequest(BaseModel):
    """
    Request payload for user registration
    """
    model_config = ConfigDict(extra='forbid')
    
    email: str = Field(..., description="User's email address")
    password: str = Field(
        ..., 
        description="User's password (minimum 8 characters)",
        min_length=8,
        max_length=128
    )
    name: str = Field(
        ..., 
        description="User's full name", 
        min_length=1, 
        max_length=200
    )
    role: UserRole = Field(..., description="User's role (SUPERADMIN can only be created by existing superadmin)")


class LoginUserRequest(BaseModel):
    """
    Request payload for user login
    """
    model_config = ConfigDict(extra='forbid')
    
    email: str = Field(..., description="User's email address")
    password: str = Field(..., description="User's password")


class RefreshTokenRequest(BaseModel):
    """
    Request payload for token refresh
    """
    model_config = ConfigDict(extra='forbid')
    
    refreshToken: str = Field(..., description="Valid refresh token")


class AuthResponse(BaseModel):
    """
    Response from registration/login endpoints
    """
    model_config = ConfigDict(extra='forbid')
    
    user: User = Field(..., description="User information")
    tokens: AuthTokens = Field(..., description="Authentication tokens")


class ApiError(BaseModel):
    """
    API error response
    """
    model_config = ConfigDict(extra='forbid')
    
    error: str = Field(..., description="Error code")
    message: str = Field(..., description="Human-readable error description")
    details: Optional[dict] = Field(None, description="Additional error details")